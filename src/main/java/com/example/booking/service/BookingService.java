package com.example.booking.service;

import com.example.booking.model.Ticket;
import com.example.booking.model.Passenger;
import com.example.booking.model.Flight;

import java.util.List;

/**
 * Интерфейс бизнес-логики бронирования билетов.
 *
 * <p>Слой сервиса отвечает за реализацию бизнес-операций: проверку, валидацию, работу с моделями и вызовы репозиториев.
 * Здесь не должно быть подробностей о том, как именно хранятся данные — только "что" должно произойти, а не "как".
 *
 * <p>Текущая версия интерфейса поддерживает:
 * <ul>
 *     <li>Бронирование билета (регистрация нового билета).</li>
 *     <li>Отмену билета по его идентификатору.</li>
 *     <li>Получение списка всех билетов конкретного пассажира.</li>
 * </ul>
 *
 * <p><b>Рекомендуется дополнить интерфейс следующими методами:</b>
 * <ol>
 *     <li>{@code boolean isFlightAvailable(Flight flight)} —
 *         чтобы проверить, можно ли еще забронировать билет на конкретный рейс (есть ли свободные места).</li>
 *     <li>{@code List<Ticket> getAllTickets()} —
 *         получить все забронированные билеты, например, для отображения в админ-панели.</li>
 *     <li>{@code Ticket findTicketById(String ticketId)} —
 *         получить билет по ID, если нужна информация перед отменой или выводом в интерфейсе.</li>
 * </ol>
 *
 * <p>Эти методы позволят сделать бизнес-логику полной, связать между собой модели и репозитории,
 * и эффективно управлять бронированием.
 */
public interface BookingService {

    /**
     * Бронирует билет для указанного пассажира на указанный рейс.
     *
     * <p><b>Ожидаемая логика:</b>
     * <ul>
     *     <li>Проверить, есть ли свободные места в рейсе.</li>
     *     <li>Если мест нет — вернуть {@code null} или выбросить исключение.</li>
     *     <li>Если место есть — создать объект {@code Ticket} со статусом "АКТИВЕН".</li>
     *     <li>Сохранить билет в хранилище через {@code TicketRepository}.</li>
     *     <li>Обновить количество свободных мест в {@code Flight}.</li>
     * </ul>
     *
     * @param passenger пассажир, которому бронируется билет
     * @param flight рейс, на который бронируется билет
     * @return созданный билет или {@code null}, если бронирование невозможно
     */
    Ticket bookTicket(Passenger passenger, Flight flight);

    /**
     * Отменяет ранее забронированный билет.
     *
     * <p><b>Ожидаемая логика:</b>
     * <ul>
     *     <li>Найти билет по {@code ticketId}.</li>
     *     <li>Изменить статус билета на "ОТМЕНЕН".</li>
     *     <li>Обновить данные билета в репозитории.</li>
     *     <li>Увеличить количество свободных мест в соответствующем рейсе.</li>
     * </ul>
     *
     * <p>Если билет не найден — можно ничего не делать или выбросить исключение.
     *
     * @param ticketId идентификатор билета, который нужно отменить
     */
    void cancelTicket(String ticketId);

    /**
     * Возвращает список всех билетов, оформленных на указанного пассажира.
     *
     * <p><b>Ожидаемая логика:</b>
     * <ul>
     *     <li>Передать пассажира в {@code TicketRepository} и получить список всех его билетов.</li>
     *     <li>Можно фильтровать только активные билеты (по желанию).</li>
     * </ul>
     *
     * @param passenger объект пассажира
     * @return список билетов, может быть пустым
     */
    List<Ticket> getTicketsByPassenger(Passenger passenger);
}