package com.example.booking.service;

import com.example.booking.model.Flight;

import java.util.List;

/**
 * Интерфейс для работы с рейсами в системе бронирования.
 *
 * <p>Этот сервис реализует бизнес-логику, связанную с рейсами:
 * поиск, обновление информации о доступных местах, проверка наличия рейса и т.д.
 *
 * <p>Сервисный слой не хранит данные напрямую — он обращается к репозиториям,
 * принимает решения, проверяет входные данные и управляет процессами.
 *
 * <p><b>Текущие методы:</b>
 * <ul>
 *     <li>{@code findAvailableFlights(String departureCity, String arrivalCity)} — поиск подходящих рейсов.</li>
 *     <li>{@code updateAvailableSeats(String flightNumber, int newAvailableSeats)} — обновление количества мест на рейсе.</li>
 * </ul>
 *
 * <p><b>Рекомендуется добавить следующие методы:</b>
 * <ol>
 *     <li>{@code Flight findByFlightNumber(String flightNumber)} — найти конкретный рейс по его номеру.</li>
 *     <li>{@code List<Flight> getAllFlights()} — вернуть список всех рейсов (например, для отображения в админ-панели).</li>
 *     <li>{@code void registerFlight(Flight flight)} — добавить новый рейс в систему (вручную или через импорт).</li>
 * </ol>
 *
 * Эти методы позволят управлять всеми аспектами работы с рейсами, а не только местами.
 */
public interface FlightService {

    /**
     * Находит все рейсы, которые отправляются из одного города и прибывают в другой,
     * и на которых есть доступные места.
     *
     * <p><b>Ожидаемая логика:</b>
     * <ol>
     *     <li>Получить список всех рейсов из хранилища.</li>
     *     <li>Отфильтровать по полям:
     *         <ul>
     *             <li>город отправления совпадает с {@code departureCity}</li>
     *             <li>город прибытия совпадает с {@code arrivalCity}</li>
     *             <li>количество доступных мест больше 0</li>
     *         </ul>
     *     </li>
     *     <li>Вернуть отфильтрованный список.</li>
     * </ol>
     *
     * @param departureCity город отправления
     * @param arrivalCity город прибытия
     * @return список подходящих рейсов (может быть пустым)
     */
    List<Flight> findAvailableFlights(String departureCity, String arrivalCity);

    /**
     * Обновляет количество доступных мест в рейсе.
     *
     * <p><b>Ожидаемая логика:</b>
     * <ol>
     *     <li>Найти рейс по номеру через репозиторий.</li>
     *     <li>Если найден:
     *         <ul>
     *             <li>Установить новое значение поля "доступные места".</li>
     *             <li>Сохранить обновлённый рейс в репозитории.</li>
     *         </ul>
     *     </li>
     *     <li>Если не найден — ничего не делать или выбросить исключение.</li>
     * </ol>
     *
     * <p>Метод может использоваться при бронировании (уменьшить), при отмене (увеличить), при админ-редактировании.
     *
     * @param flightNumber номер рейса
     * @param newAvailableSeats новое количество доступных мест
     */
    void updateAvailableSeats(String flightNumber, int newAvailableSeats);
}